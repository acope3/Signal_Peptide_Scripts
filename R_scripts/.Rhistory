}
# First, suck in all the files with .Rsave line ending in your working directory:
files = system("ls -1 | grep .Rsave", intern=TRUE)
# Create an empty list object
hisse.results.list = list()
# Now loop through all files, adding the embedded pp.recon object in each
for(i in sequence(length(files))){
load(files[i])
cat(files[i],"\n")
hisse.results.list[[i]] = pp.recon
rm(pp.recon)
}
# First, suck in all the files with .Rsave line ending in your working directory:
files = system("ls -1 | grep testrecon*.Rsave", intern=TRUE)
# Create an empty list object
hisse.results.list = list()
# Now loop through all files, adding the embedded pp.recon object in each
for(i in sequence(length(files))){
load(files[i])
cat(files[i],"\n")
hisse.results.list[[i]] = pp.recon
rm(pp.recon)
}
files = system("ls -1 | grep testrecon[0-9].Rsave", intern=TRUE)
files = system("ls -1 | grep 'testrecon[0-9].Rsave'", intern=TRUE)
hisse.results.list = list()
for(i in sequence(length(files))){
load(files[i])
cat(files[i],"\n")
hisse.results.list[[i]] = pp.recon
rm(pp.recon)
}
knitr::opts_chunk$set(echo = TRUE, cache=TRUE)
set.seed(1859)
#install.packages(c("ape", "TreeSim", "geiger", "diversitree", "devtools"))
library(ape)
library(TreeSim)
library(geiger)
library(diversitree)
#devtools::install_github("thej022214/hisse")
library(hisse)
my.tree <- TreeSim::sim.bd.taxa(n=300, numbsim=1, lambda=0.1, mu=0)[[1]]
#stop("How to plot a tree")
plot.phylo(my.tree)
ape::ltt.plot(my.tree)
ape::ltt.plot(my.tree, log="y")
yule.trees <- TreeSim::sim.bd.taxa(n=300, numbsim=10, lambda=0.1, mu=0, complete=FALSE)
ape::mltt.plot(yule.trees)
#stop("How to do a multiple ltt plot?")
bd.trees <- TreeSim::sim.bd.taxa(n=300, numbsim=10, lambda=1, mu=.9, complete=FALSE)
ape::mltt.plot(bd.trees, log="y", legend=FALSE)
depth.range <- range(unlist(lapply(yule.trees,ape::branching.times)), unlist(lapply(bd.trees,ape::branching.times)))
max.depth <- sum(abs(depth.range)) #ape rescales depths
plot(x=c(0, -1*max.depth), y=c(1, ape::Ntip(yule.trees[[1]])), log="y", type="n", bty="n", xlab="Time", ylab="N")
colors=c(rgb(1,0,0,0.5), rgb(0, 0, 0, 0.5))
list.of.both <- list(bd.trees, yule.trees)
for (i in sequence(2)) {
tree.list <- list.of.both[[i]]
for (j in sequence(length(tree.list))) {
ape::ltt.lines(tree.list[[j]], col=colors[[i]])
}
}
legend("topleft", legend=c("Birth Death", "Yule"), fill=colors)
depth.range <- range(unlist(lapply(yule.trees,ape::branching.times)), unlist(lapply(bd.trees,ape::branching.times)))
max.depth <- sum(abs(depth.range)) #ape rescales depths
plot(x=c(0, -5), y=c(200, ape::Ntip(yule.trees[[1]])), log="y", type="n", bty="n", xlab="Time", ylab="N")
colors=c(rgb(1,0,0,0.5), rgb(0, 0, 0, 0.5))
list.of.both <- list(bd.trees, yule.trees)
for (i in sequence(2)) {
tree.list <- list.of.both[[i]]
for (j in sequence(length(tree.list))) {
ape::ltt.lines(tree.list[[j]], col=colors[[i]])
}
}
legend("topleft", legend=c("Birth Death", "Yule"), fill=colors)
## Large difference in speciation rate and extinction rate
my.trees <- TreeSim::sim.bd.taxa(n=300, numbsim=10, lambda=1, mu=0.001, complete=FALSE)
ape::mltt.plot(my.trees, log="y", legend=FALSE)
## sum of speciation and extinction rates always sums to 1
# for (i in seq(0.0,1.0,0.25))
# {
#   j = 1 - i
#   cat(i,"\n")
#   my.trees <- TreeSim::sim.bd.taxa(n=300, numbsim=10, lambda=i, mu=j, complete=FALSE)
#   ape::mltt.plot(my.trees, log="y", legend=FALSE)
# }
for (i in seq(0.25,1.0,0.25))
{
j = i - 0.1
my.trees <- TreeSim::sim.bd.taxa(n=300, numbsim=10, lambda=i, mu=j, complete=FALSE)
ape::mltt.plot(my.trees, log="y", legend=FALSE)
}
speciation.rates <- c(0.1, 0.1, 0.1, 0.2) #0A, 1A, 0B, 1B
extinction.rates <- rep(0.03, 4)
transition.rates <- c(0.01,0.01,0, 0.01, 0, 0.01, 0.01,0,0.01, 0,0.01,0.01)
pars <- c(speciation.rates, extinction.rates, transition.rates)
phy <- NULL
while (is.null(phy))
{
phy <- tree.musse(pars, max.taxa=50, x0=1, include.extinct=FALSE)
}
sim.dat.true <- data.frame(names(phy$tip.state), phy$tip.state)
sim.dat <- sim.dat.true
# Now to hide the "hidden" state
sim.dat[sim.dat[,2]==3,2] = 1
sim.dat[sim.dat[,2]==4,2] = 2
# and convert states 1,2 to 0,1
sim.dat[,2] = sim.dat[,2] - 1
plot(phy)
knitr::kable(cbind(sim.dat, true.char=sim.dat.true$phy.tip.state))
turnover.anc = c(1,1,0,0)
eps.anc = c(1,1,0,0)
turnover.anc = c(1,2,0,0)
turnover.anc = c(1,2,3,4)
eps.anc = c(0,0,0,0)
trans.rates = TransMatMaker(hidden.states=TRUE)
trans.rates
trans.rates.nodual = ParDrop(trans.rates, c(3,5,8,10))
trans.rates.nodual
trans.rates.nodual.equal16 = ParEqual(trans.rates.nodual, c(1,6))
trans.rates.nodual.equal16
trans.rates.nodual.allequal = ParEqual(trans.rates.nodual, c(1,2,1,3,1,4,1,5,1,6,1,7,1,8))
trans.rates.nodual.allequal
trans.rates.nodual.allequal = trans.rates.nodual
trans.rates.nodual.allequal[!is.na(trans.rates.nodual.allequal) & !trans.rates.nodual.allequal == 0] = 1
trans.rates.nodual.allequal
trans.rates.bisse = TransMatMaker(hidden.states=FALSE)
trans.rates.bisse
pp = hisse(phy, sim.dat, f=c(1,1), hidden.states=TRUE, turnover.anc=turnover.anc,
eps.anc=eps.anc, trans.rate=trans.rates.nodual.allequal)
turnover.anc = c(1,2,0,3)
eps.anc = c(1,2,0,3)
trans.rates <- TransMatMaker(hidden.states=TRUE)
trans.rates.nodual.no0B <- ParDrop(trans.rates, c(2,3,5,7,8,9,10,12))
trans.rates.nodual.no0B
pp = hisse(phy, sim.dat, f=c(1,1), hidden.states=TRUE, turnover.anc=turnover.anc,
eps.anc=eps.anc, trans.rate=trans.rates.nodual.allequal, output.type="net.div")
turnover.anc = c(1,1,2,2)
eps.anc = c(1,1,2,2)
trans.rates = TransMatMaker(hidden.states=TRUE)
trans.rates.nodual = ParDrop(trans.rates, c(3,5,8,10))
trans.rates.nodual.allequal = ParEqual(trans.rates.nodual, c(1,2,1,3,1,4,1,5,1,6,1,7,1,8))
trans.rates.nodual.allequal
# Now we want three specific rates:
trans.rates.nodual.threerates <- trans.rates.nodual
# Set all transitions from 0->1 to be governed by a single rate:
to.change <- cbind(c(1,3), c(2,4))
trans.rates.nodual.threerates[to.change] = 1
# Now set all transitions from 1->0 to be governed by a single rate:
to.change <- cbind(c(2,4), c(1,3))
trans.rates.nodual.threerates[to.change] = 2
# Finally, set all transitions between the hidden state to be a single rate (essentially giving
# you an estimate of the rate by which shifts in diversification occur:
to.change <- cbind(c(1,3,2,4), c(3,1,4,2))
trans.rates.nodual.threerates[to.change] = 3
trans.rates.nodual.threerates
pp = hisse(phy, sim.dat, f=c(1,1), hidden.states=TRUE, turnover.anc=turnover.anc,
eps.anc=eps.anc, trans.rate=trans.rates.nodual.allequal)
knitr::opts_chunk$set(fig.width=7, fig.height=5)
load("testrecon1.Rsave")
class(pp.recon)
pp.recon
plot.hisse.states(pp.recon, rate.param="net.div", show.tip.label=FALSE)
plot.hisse.states(pp.recon, rate.param="net.div", show.tip.label=FALSE, rate.range=c(0,0.072))
pp.recon$aic
pp.recon = MarginRecon(phy, sim.dat, f=c(1,1), hidden.states=TRUE, pars=pp$solution,
aic=pp$aic, n.cores=2)
hisse.results.list = list()
load("testrecon1.Rsave")
hisse.results.list[[1]] = pp.recon
load("testrecon2.Rsave")
hisse.results.list[[2]] = pp.recon
load("testrecon3.Rsave")
hisse.results.list[[3]] = pp.recon
# Now supply the list the plotting function
plot.hisse.states(hisse.results.list, rate.param="net.div", show.tip.label=FALSE, rate.range=c(0,0.072))
# First, suck in all the files with .Rsave line ending in your working directory:
files = system("ls -1 | grep 'testrecon[0-9].Rsave'", intern=TRUE)
# Create an empty list object
hisse.results.list = list()
# Now loop through all files, adding the embedded pp.recon object in each
for(i in sequence(length(files))){
load(files[i])
hisse.results.list[[i]] = pp.recon
rm(pp.recon)
}
tree <- read.tree("bacterial_tree.tre")
discrete.data <- read.csv(file="discrete_traits.csv", stringsAsFactors=FALSE,row.names = 1,header=0) #death to factors.
CleanData <- function(phy, data) {
cleaned <- treedata(phy,data,warnings=F)# in Geiger is probably my favorite function in R.
return(cleaned)
}
cleaned.discrete <- CleanData(tree,discrete.data)
one.discrete.char.orig <- read.table("discrete_traits.csv",sep=",",header=T,stringsAsFactors = F,row.names=1)
one.discrete.char <- one.discrete.char.orig[cleaned.discrete$phy$tip.label,] ##reorder traits to match order in phylogenetic tree
reconstruction.info <- ace(one.discrete.char, cleaned.discrete$phy, type="discrete", method="ML", CI=TRUE)
best.states <- colnames(reconstruction.info$lik.anc)[apply(reconstruction.info$lik.anc, 1, which.max)]
cleaned.discrete$phy$node.label <- best.states
labeled.tree <-chronoMPL(cleaned.discrete$phy)
discrete.data <- read.table("discrete_traits.csv",sep=",",header=T,stringsAsFactors = F)
turnover.anc = c(1,2,3,4) ## All states have free parameters
eps.anc = c(0,0,0,0) ## Pure birth model
trans.rates = TransMatMaker(hidden.states=TRUE)
trans.rates.nodual = ParDrop(trans.rates, c(3,5,8,10))
trans.rates.nodual.allequal = ParEqual(trans.rates.nodual, c(1,2,1,3,1,4,1,5,1,6,1,7,1,8))
pp = hisse(labeled.tree, discrete.data, hidden.states=TRUE, turnover.anc=turnover.anc,
eps.anc=eps.anc, trans.rate=trans.rates.nodual.allequal)
pp.recon = MarginRecon(labeled.tree, discrete.data, f=c(1,1), hidden.states=TRUE, pars=pp$solution,
aic=pp$aic, n.cores=2)
plot.hisse.states(pp.recon, rate.param="net.div", show.tip.label=F)
results.list <- list()
results.list[[1]] <- pp.recon
turnover.anc = c(1,2) ## All states have free parameters
eps.anc = c(0,0) ## Pure birth model
trans.rates.bisse = TransMatMaker(hidden.states=FALSE)
trans.rates.bisse.allequal = ParEqual(trans.rates.bisse, c(1,2))
pp.bisse = hisse(labeled.tree, discrete.data, hidden.states=FALSE, turnover.anc=turnover.anc,
eps.anc=eps.anc, trans.rate=trans.rates.bisse.allequal)
pp.bisse.recon = MarginRecon(labeled.tree, discrete.data, f=c(1,1), hidden.states=F, pars=pp.bisse$solution,
aic=pp.bisse$aic, n.cores=2)
plot.hisse.states(pp.bisse.recon, rate.param="net.div", show.tip.label=F)
results.list[[2]] <- pp.bisse.recon
df <- data.frame(models=c("HISSE (no extinction, rates equal)", "BISSE (no extinction, rates equal)"),AICc=c(pp$AICc,pp.bisse$AICc),stringsAsFactors = F)
turnover.anc = c(1,2,3,4) ## All states have free parameters
eps.anc = c(0,0,0,0) ## Pure birth model
trans.rates = TransMatMaker(hidden.states=TRUE)
trans.rates.nodual = ParDrop(trans.rates, c(3,5,8,10))
pp.hisse.nonequal = hisse(labeled.tree, discrete.data, hidden.states=TRUE, turnover.anc=turnover.anc,
eps.anc=eps.anc, trans.rate=trans.rates.nodual)
pp.recon = MarginRecon(labeled.tree, discrete.data, f=c(1,1), hidden.states=TRUE, pars=pp.hisse.nonequal$solution,
aic=pp.hisse.nonequal$aic, n.cores=2)
plot.hisse.states(pp.recon, rate.param="net.div", show.tip.label=F)
results.list[[3]] <- pp.recon
turnover.anc = c(1,2) ## All states have free parameters
eps.anc = c(0,0) ## Pure birth model
trans.rates.bisse = TransMatMaker(hidden.states=FALSE)
pp.bisse.nonequal = hisse(labeled.tree, discrete.data, hidden.states=FALSE, turnover.anc=turnover.anc,
eps.anc=eps.anc, trans.rate=trans.rates.bisse)
pp.bisse.recon = MarginRecon(labeled.tree, discrete.data, f=c(1,1), hidden.states=F, pars=pp.bisse.nonequal$solution,
aic=pp.bisse.nonequal$aic, n.cores=2)
plot.hisse.states(pp.bisse.recon, rate.param="net.div", show.tip.label=F)
results.list[[4]] <- pp.bisse.recon
df.tmp<- data.frame(models=c("HISSE (no extinction, rates not equal)", "BISSE (no extinction, rates not equal)"),AICc=c(pp.hisse.nonequal$AICc,pp.bisse.nonequal$AICc),stringsAsFactors = F)
df <- rbind(df,df.tmp)
turnover.anc = c(1,2,3,4) ## All states have free parameters
eps.anc = c(1,1,1,1)
trans.rates = TransMatMaker(hidden.states=TRUE)
trans.rates.nodual = ParDrop(trans.rates, c(3,5,8,10))
trans.rates.nodual.allequal = ParEqual(trans.rates.nodual, c(1,2,1,3,1,4,1,5,1,6,1,7,1,8))
pp.hisse.equal.eps = hisse(labeled.tree, discrete.data, hidden.states=TRUE, turnover.anc=turnover.anc,
eps.anc=eps.anc, trans.rate=trans.rates.nodual.allequal)
pp.recon = MarginRecon(labeled.tree, discrete.data, f=c(1,1), hidden.states=TRUE, pars=pp.hisse.equal.eps$solution,
aic=pp.hisse.equal.eps$aic, n.cores=2)
plot.hisse.states(pp.recon, rate.param="net.div", show.tip.label=F)
results.list[[5]] <- pp.recon
turnover.anc = c(1,2) ## All states have free parameters
eps.anc = c(1,1)
trans.rates.bisse = TransMatMaker(hidden.states=FALSE)
trans.rates.bisse.allequal = ParEqual(trans.rates.bisse, c(1,2))
pp.bisse.equal.eps = hisse(labeled.tree, discrete.data, hidden.states=FALSE, turnover.anc=turnover.anc,
eps.anc=eps.anc, trans.rate=trans.rates.bisse.allequal)
pp.bisse.recon = MarginRecon(labeled.tree, discrete.data, f=c(1,1), hidden.states=F, pars=pp.bisse.equal.eps$solution,
aic=pp.bisse.equal.eps$aic, n.cores=2)
plot.hisse.states(pp.bisse.recon, rate.param="net.div", show.tip.label=F)
results.list[[6]] <- pp.bisse.recon
df.tmp<- data.frame(models=c("HISSE (extinction, rates equal)", "BISSE (extinction, rates equal)"),AICc=c(pp.hisse.equal.eps$AICc,pp.bisse.equal.eps$AICc),stringsAsFactors = F)
df <- rbind(df,df.tmp)
turnover.anc = c(1,1,2,2) ## All states have free parameters
eps.anc = c(1,1,2,2)
trans.rates = TransMatMaker(hidden.states=TRUE)
trans.rates.nodual = ParDrop(trans.rates, c(3,5,8,10))
pp.cid= hisse(labeled.tree, discrete.data, hidden.states=TRUE, turnover.anc=turnover.anc,
eps.anc=eps.anc, trans.rate=trans.rates.nodual)
pp.recon = MarginRecon(labeled.tree, discrete.data, f=c(1,1), hidden.states=TRUE, pars=pp.cid$solution,
aic=pp.cid$aic, n.cores=2)
plot.hisse.states(pp.recon, rate.param="net.div", show.tip.label=F)
results.list[[7]] <- pp.recon
df.tmp<- data.frame(models=c("CID-2"),AICc=c(pp.cid$AICc),stringsAsFactors = F)
df <- rbind(df,df.tmp)
best.model <- which.min(df[,2])
print(paste("The best model is ",df[best.model,1]))
plot.hisse.states(results.list, rate.param="net.div", show.tip.label=FALSE)
results.list
hisse.results.list
results.list
help("plot.hisse.states")
results.list[[1]]
pp<-results.list[[1]]
df[best.model,1]
help(corHMM)
??corHMM
help("corHMM")
library(ape)
tree <- read.tree("RAxML_bestTree.ef1.tree")
plot(tree)
q()
library(ape)
tree <- read.tree("RAxML_bestTree.ef1.tree")
plot(tree)
q()
source('~/test.R')
source('~/test.R')
source('~/test.R')
source('~/test.R')
library(mvMORPH)
help(mvEB)
help(mvBM)
citation("cluster")
setwd("~/Signal_Peptide_Project/For_paper/R_scripts")
help("replace)")
help("replace")
source('~/Signal_Peptide_Project/For_paper/R_scripts/getEmpPhi.R')
source('~/Signal_Peptide_Project/For_paper/R_scripts/getEmpPhi.R')
df
mean(df[,5])
help(write.table)
source('~/Signal_Peptide_Project/For_paper/R_scripts/getEmpPhi.R')
colnames(df)<-c("Gene","mRNA_RPKM","Trans_Eff_AU","RPKM*AU","Phi")
write.table(x=df[,c(1,5)],file="Ecoli_emp_phi.csv",quote=F,sep=",",row.names = F,col.names = T)
4140-559
4140-3559
source('~/Signal_Peptide_Project/For_paper/R_scripts/getEmpPhi.R')
source('~/Signal_Peptide_Project/For_paper/R_scripts/getEmpPhi.R')
getcwd()
getwd()
source('~/Signal_Peptide_Project/For_paper/R_scripts/getEmpPhi.R')
source('~/Signal_Peptide_Project/For_paper/R_scripts/getEmpPhi.R')
df
mean(df[,5])
mean(df[which(df[,5]!=1),5])
source('~/Signal_Peptide_Project/For_paper/R_scripts/getEmpPhi.R')
write.table(df[3359:4140,c(1,5)],file="../Data/Empirical/Emp_Phi/Ecoli_pht_emp_phi.csv",quote = F,row.names = F,col.names = c("Gene","Phi"),sep=",")
source('~/Signal_Peptide_Project/For_paper/R_scripts/getEmpPhi.R')
source('~/Signal_Peptide_Project/For_paper/R_scripts/getEmpPhi.R')
write.table(x=df[,c(5)],file="../Data/Empirical/Emp_Phi/Ecoli_emp_phi.csv",quote=F,row.names = T, col.names = c("Gene","Phi"),sep=",")
write.table(df[1:3358,c(5)],file="../Data/Empirical/Emp_Phi/Ecoli_main_emp_phi.csv",quote = F,row.names = T ,col.names = c("Gene","Phi"),sep=",")
write.table(df[3359:4140,c(5)],file="../Data/Empirical/Emp_Phi/Ecoli_pht_emp_phi.csv",quote = F,row.names =T ,col.names = c("Gene","Phi"),sep=",")
source('~/Signal_Peptide_Project/For_paper/R_scripts/getEmpPhi.R')
df
source('~/Signal_Peptide_Project/For_paper/R_scripts/getEmpPhi.R')
source('~/Signal_Peptide_Project/For_paper/R_scripts/getEmpPhi.R')
source('~/Signal_Peptide_Project/For_paper/R_scripts/getEmpPhi.R')
df
rownames(Df)
rownames(df)
source('~/Signal_Peptide_Project/For_paper/R_scripts/getEmpPhi.R')
source('~/Signal_Peptide_Project/For_paper/R_scripts/getEmpPhi.R')
df[,1]
typeof(rownames(df))
li_mops_complete <- read.table("../Data/Empirical/Li/li_prot_synth_main_ht_liberal_mops_complete.csv",sep=",",header=T,stringsAsFactors = F)
source('~/Signal_Peptide_Project/For_paper/R_scripts/getEmpPhi.R')
source('~/Signal_Peptide_Project/For_paper/R_scripts/getEmpPhi.R')
df<-cbind(df,x)
source('~/Signal_Peptide_Project/For_paper/R_scripts/getEmpPhi.R')
df
var(df[,4])
apply(df,var,MARGIN = 1)
mean(apply(df,var,MARGIN = 1))
df["lcl|NC_000913.3_cds_NP_416192.1_1666",]
sp <- read.table("../Data/Empirical/ROC_Phi/Signal_peptides/sp_main_phi.csv",sep=",",header=T)
sp <- read.table("../Data/Empirical/ROC_Phi/Signal_peptides/sp_main_phi.csv",sep=",",header=T,stringsAsFactors = F)
df.sp <- df.sp[sp[,1],]
df.sp <- df[sp[,1],]
plot(log10(df.sp[,5]),log10(sp[,2]))
plot(log10(df.sp[which(df.sp[,5]!=1),5]),log10(sp[which(df.sp[,5]!=1),2]))
cor(log10(df.sp[which(df.sp[,5]!=1),5]),log10(sp[which(df.sp[,5]!=1),2]))
cor(log10(df.sp[which(df.sp[,6]!=1),6]),log10(sp[which(df.sp[,6]!=1),2]))
source('~/Signal_Peptide_Project/For_paper/R_scripts/getEmpPhi.R')
df
df.sp <- df[sp[,1],]
source('~/Signal_Peptide_Project/For_paper/R_scripts/getEmpPhi.R')
cor(log10(df.sp[which(df.sp[,6]!=1),6]),log10(sp[which(df.sp[,6]!=1),2]))
source('~/Signal_Peptide_Project/For_paper/R_scripts/getEmpPhi.R')
cor(log10(df.sp[which(df.sp[,6]!=1),6]),log10(sp[which(df.sp[,6]!=1),2]))
source('~/Signal_Peptide_Project/For_paper/R_scripts/getEmpPhi.R')
cor(log10(df.sp[which(df.sp[,5]!=1),5]),log10(sp[which(df.sp[,5]!=1),2]))
cor(df[,1],df[,2])
cor(df[,1],df[,3])
cor(df[,1],df[,4])
cor(log10(df.sp[which(df.sp[,5]!=1),6]),log10(sp[which(df.sp[,5]!=1),2]))
cor(log10(df.sp[which(df.sp[,5]!=1),5]),log10(sp[which(df.sp[,5]!=1),2]))
source('~/Signal_Peptide_Project/For_paper/R_scripts/getEmpPhi.R')
cor(log10(df.sp[which(df.sp[,5]!=1),5]),log10(sp[which(df.sp[,5]!=1),2]))
df[,1]
cor(df[,1],df[,2])
cor(df[,1],df[,3])
cor(df[,1],df[,4])
cor(df[,1],df[,5])
cor(df[,2],df[,2])
cor(df[,2],df[,3])
cor(df[,2],df[,4])
cor(df[,3],df[,4])
df[,3]
View(df)
total <- total ^ (1/len)
source('~/Signal_Peptide_Project/For_paper/R_scripts/getEmpPhi.R')
cor(df[,1],df[,3])
cor(df[,1],df[,4])
cor(df[,1],df[,2])
cor(df[,1],df[,4])
cor(df[,1],df[,5])
cor(log(df[,1]),log(df[,5]))
df.sp
View(df.sp)
source('~/Signal_Peptide_Project/For_paper/R_scripts/getEmpPhi.R')
cor(log10(df.sp[which(df.sp[,5]!=1),5]),log10(sp[which(df.sp[,5]!=1),2]))
hist(df.sp[,5])
hist(log10(df.sp[,5]))
apply(df.sp[,1:4],var,MARGIN=1)
mean(apply(df.sp[,1:4],var,MARGIN=1))
which.max(apply(df.sp[,1:4],var,MARGIN=1))
which.max(apply(df.sp[-c("lcl|NC_000913.3_cds_NP_416192.1_1666 "),1:4],var,MARGIN=1))
which(rownames(df.sp) == "lcl|NC_000913.3_cds_NP_416192.1_1666 ")
which(rownames(df.sp) == "lcl|NC_000913.3_cds_NP_416192.1_1666")
mean(apply(df.sp[-c(134),1:4],var,MARGIN=1))
mean(df.sp[-c(134),5])
mean(df.sp[-c(134),1])
mean(df.sp[-c(134),2])
mean(df.sp[-c(134),3])
mean(df.sp[-c(134),4])
boxplot(df.sp[-c(134),4])
boxplot(df.sp[,4])
boxplot(df[,5])
var(df[,5])
var(df.sp[,5])
var(df.sp[-c(134),5])
var(df[-c(134),5])
var(df.sp[-c(134),5])
boxplot(df.sp[-c(134),5])
boxplot(df[-c(134),5])
mean(df.sp[-c(134),5])
mean(df.sp[,5])
mean(apply(df[-c(134),1:4],var,MARGIN=1))
mean(apply(df[,1:4],var,MARGIN=1))
mean(apply(df.sp[,1:4],var,MARGIN=1))
mean(apply(df.sp[-c(134),1:4],var,MARGIN=1))
sqrt(mean(apply(df[,1:4],var,MARGIN=1)))
source('~/Signal_Peptide_Project/For_paper/R_scripts/getEmpPhi.R')
x <- x/mean(x)
mean(x)
source('~/Signal_Peptide_Project/For_paper/R_scripts/getEmpPhi.R')
hist(x)
hist(log10(x))
source('~/Signal_Peptide_Project/For_paper/R_scripts/getEmpPhi.R')
x
hist(log10(x))
source('~/Signal_Peptide_Project/For_paper/R_scripts/getEmpPhi.R')
hist(log10(x))
source('~/Signal_Peptide_Project/For_paper/R_scripts/getEmpPhi.R')
hist(log10(x))
hist(log10(df[,5]))
View(li)
View(df)
mean(x)
source('~/Signal_Peptide_Project/For_paper/R_scripts/getEmpPhi.R')
source('~/Signal_Peptide_Project/For_paper/R_scripts/getEmpPhi.R')
hist(log10(df[,5]))
source('~/Signal_Peptide_Project/For_paper/R_scripts/getEmpPhi.R')
source('~/Signal_Peptide_Project/For_paper/R_scripts/getEmpPhi.R')
source('~/Signal_Peptide_Project/For_paper/R_scripts/getEmpPhi.R')
hist(log10(x))
source('~/Signal_Peptide_Project/For_paper/R_scripts/getEmpPhi.R')
hist(log10(x))
hist(log10(df[,1]))
source('~/Signal_Peptide_Project/For_paper/R_scripts/getEmpPhi.R')
hist(log10(x))
source('~/Signal_Peptide_Project/For_paper/R_scripts/getEmpPhi.R')
for (i in colnames(df))
{
df[,i] <- normalize(df[,i])
}
x<-apply(df,geom_mean,MARGIN = 1)
x[x==0]<-0.0001
x
df<-cbind(df,x)
hist(log10(x))
df <- data.frame(li_mrna[,2]*li_au[,2],li_mops_complete[,2],li_mops_min[,2],li_mops_no_meth[,2],row.names = li[,1],stringsAsFactors = F)
for (i in colnames(df))
{
df[,i] <- normalize(df[,i])
}
x<-apply(df,geom_mean,MARGIN = 1)
which(x==0)
x
df<-cbind(df,x)
source('~/Signal_Peptide_Project/For_paper/R_scripts/getEmpPhi.R')
x
hist(log10(x))
mean(x)
source('~/Signal_Peptide_Project/For_paper/R_scripts/getEmpPhi.R')
hist(log10(x))
mean(x)
source('~/Signal_Peptide_Project/For_paper/R_scripts/getEmpPhi.R')
sp <- read.table("../Data/Empirical/Emp_Phi/Signal_peptides/sp_main_phi.csv",sep=",",header=T)
var(sp[,2])
var(sp[-c(134),2])
source('~/Signal_Peptide_Project/For_paper/R_scripts/phiHist.R')
p
source('~/Signal_Peptide_Project/For_paper/R_scripts/phiHist.R')
setwd("~/Signal_Peptide_Project/For_paper/R_scripts")
source('~/Signal_Peptide_Project/For_paper/R_scripts/emp_comp.R')
source('~/Signal_Peptide_Project/For_paper/R_scripts/emp_comp.R')
dev.off()
dev.off()
dev.off()
source('~/Signal_Peptide_Project/For_paper/R_scripts/emp_comp.R')
source('~/Signal_Peptide_Project/For_paper/R_scripts/emp_comp.R')
source('~/Signal_Peptide_Project/For_paper/R_scripts/histograms.R')
p
source('~/Signal_Peptide_Project/For_paper/R_scripts/histograms.R')
source('~/Signal_Peptide_Project/For_paper/R_scripts/histograms.R')
source('~/Signal_Peptide_Project/For_paper/R_scripts/histograms.R')
